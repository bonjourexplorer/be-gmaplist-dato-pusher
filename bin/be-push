#!/usr/bin/env node
/* eslint-disable no-sync */
// eslint-disable-next-line max-params
(function main(PACKAGE, PROCESS, COMMAND, CHALK, parse_gmaplist, push_to_dato) {
    COMMAND
        .version(PACKAGE.version, '-v, --version')
        .usage('array (json string)')
        .parse(PROCESS.argv)
        .name(PACKAGE.name)
        ; // eslint-disable-line indent
    write_to_stderr('');
    if (COMMAND.args.length > 0) {
        try_to_push_to_dato(COMMAND.args[0]);
        COMMAND.args.length > 1
            && write_warning_to_stderr(
                `‚ö†Ô∏è  arg0 used, arg1...arg${ COMMAND.args.length - 1 } ignored`,
                ) // eslint-disable-line indent
            ; // eslint-disable-line indent
    } else {
        try_to_push_to_dato(parse_gmaplist());
    }

    // -----------

    function try_to_push_to_dato(raw_json) {
        push_to_dato(raw_json)
            ? write_success_to_stderr('üèÅ  Successfully pushed to Dato!')
            : write_error_to_stderr('üòû  Failed to push to Dato')
            ; // eslint-disable-line indent
        write_to_stdout(raw_json);
    }

    // -----------

    /* eslint-disable no-unused-vars */
    function write_to_stdout(text) {
        PROCESS.stdout.write(`${ text }\n`);
    }
    function write_to_stderr(text) {
        PROCESS.stderr.write(`${ text }\n`);
    }
    function write_info_to_stderr(text) {
        PROCESS.stderr.write(`${ CHALK.cyan(text) }\n`);
    }
    function write_success_to_stderr(text) {
        PROCESS.stderr.write(`${ CHALK.green(text) }\n`);
    }
    function write_warning_to_stderr(text) {
        PROCESS.stderr.write(`${ CHALK.yellow(text) }\n`);
    }
    function write_error_to_stderr(text) {
        PROCESS.stderr.write(`${ CHALK.red(text) }\n`);
    }
}(
    require('../package.json'),
    require('process'),
    require('commander'),
    require('chalk'),
    require('parse-gmaplist'),
    require('../source/index.js'),
));
